/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from "./routes/__root";
import { Route as IndexRouteImport } from "./routes/index";
import { Route as OrdersIdRouteImport } from "./routes/orders/$id";
import { Route as OrdersIndexRouteImport } from "./routes/orders/index";
import { Route as OrdersNewRouteImport } from "./routes/orders/new";

const IndexRoute = IndexRouteImport.update({
	id: "/",
	path: "/",
	getParentRoute: () => rootRouteImport,
} as any);
const OrdersIndexRoute = OrdersIndexRouteImport.update({
	id: "/orders/",
	path: "/orders/",
	getParentRoute: () => rootRouteImport,
} as any);
const OrdersNewRoute = OrdersNewRouteImport.update({
	id: "/orders/new",
	path: "/orders/new",
	getParentRoute: () => rootRouteImport,
} as any);
const OrdersIdRoute = OrdersIdRouteImport.update({
	id: "/orders/$id",
	path: "/orders/$id",
	getParentRoute: () => rootRouteImport,
} as any);

export interface FileRoutesByFullPath {
	"/": typeof IndexRoute;
	"/orders/$id": typeof OrdersIdRoute;
	"/orders/new": typeof OrdersNewRoute;
	"/orders": typeof OrdersIndexRoute;
}

export interface FileRoutesByTo {
	"/": typeof IndexRoute;
	"/orders/$id": typeof OrdersIdRoute;
	"/orders/new": typeof OrdersNewRoute;
	"/orders": typeof OrdersIndexRoute;
}

export interface FileRoutesById {
	__root__: typeof rootRouteImport;
	"/": typeof IndexRoute;
	"/orders/$id": typeof OrdersIdRoute;
	"/orders/new": typeof OrdersNewRoute;
	"/orders/": typeof OrdersIndexRoute;
}

export interface FileRouteTypes {
	fileRoutesByFullPath: FileRoutesByFullPath;
	fullPaths: "/" | "/orders/$id" | "/orders/new" | "/orders";
	fileRoutesByTo: FileRoutesByTo;
	to: "/" | "/orders/$id" | "/orders/new" | "/orders";
	id: "__root__" | "/" | "/orders/$id" | "/orders/new" | "/orders/";
	fileRoutesById: FileRoutesById;
}

export interface RootRouteChildren {
	IndexRoute: typeof IndexRoute;
	OrdersIdRoute: typeof OrdersIdRoute;
	OrdersNewRoute: typeof OrdersNewRoute;
	OrdersIndexRoute: typeof OrdersIndexRoute;
}

declare module "@tanstack/react-router" {
	interface FileRoutesByPath {
		"/": {
			id: "/";
			path: "/";
			fullPath: "/";
			preLoaderRoute: typeof IndexRouteImport;
			parentRoute: typeof rootRouteImport;
		};
		"/orders/": {
			id: "/orders/";
			path: "/orders";
			fullPath: "/orders";
			preLoaderRoute: typeof OrdersIndexRouteImport;
			parentRoute: typeof rootRouteImport;
		};
		"/orders/new": {
			id: "/orders/new";
			path: "/orders/new";
			fullPath: "/orders/new";
			preLoaderRoute: typeof OrdersNewRouteImport;
			parentRoute: typeof rootRouteImport;
		};
		"/orders/$id": {
			id: "/orders/$id";
			path: "/orders/$id";
			fullPath: "/orders/$id";
			preLoaderRoute: typeof OrdersIdRouteImport;
			parentRoute: typeof rootRouteImport;
		};
	}
}

const rootRouteChildren: RootRouteChildren = {
	IndexRoute: IndexRoute,
	OrdersIdRoute: OrdersIdRoute,
	OrdersNewRoute: OrdersNewRoute,
	OrdersIndexRoute: OrdersIndexRoute,
};
export const routeTree = rootRouteImport._addFileChildren(rootRouteChildren)._addFileTypes<FileRouteTypes>();
